<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Controle Financeiro Avançado</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary: #4a90e2;
            --secondary: #7c4dff;
            --success: #00c853;
            --warning: #ffab00;
            --danger: #dd2c00;
            --light: #f8f9fa;
            --dark: #2d3436;
        }

        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            background: var(--light);
            color: var(--dark);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            padding: 40px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .dashboard {
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 30px;
            margin-bottom: 30px;
        }

        .form-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        }

        .input-group {
            margin-bottom: 20px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .input-group input,
        .input-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s;
        }

        .table-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #eeeeee;
        }

        th {
            background: var(--primary);
            color: white;
        }

        .status-cell {
            width: 100px;
            text-align: center;
        }

        .status-icon {
            cursor: pointer;
            font-size: 1.4em;
            transition: transform 0.2s;
        }

        .paid {
            color: var(--success);
        }

        .unpaid {
            color: var(--danger);
        }

        .actions-cell {
            width: 120px;
            text-align: center;
        }

        .edit-btn {
            color: var(--primary);
            cursor: pointer;
            margin-right: 15px;
            transition: transform 0.2s;
        }

        .delete-btn {
            color: var(--danger);
            cursor: pointer;
            transition: transform 0.2s;
        }

        .edit-btn:hover,
        .delete-btn:hover {
            transform: scale(1.2);
        }

        .recurrent-badge {
            background: var(--warning);
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            margin-left: 5px;
        }

        .totais {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        }

        .export-buttons {
            display: flex;
            gap: 15px;
            margin-top: 30px;
        }

        button {
            background: var(--primary);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Controle Financeiro Avançado</h1>
            <p>Sistema completo de gestão financeira pessoal</p>
        </div>

        <div class="dashboard">
            <div class="form-card">
                <form id="transactionForm">
                    <div class="input-group">
                        <label>Tipo de Transação</label>
                        <select id="type" required>
                            <option value="RECEITA">Receita</option>
                            <option value="DESPESA">Despesa</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label>Descrição</label>
                        <input type="text" id="description" required>
                    </div>
                    <div class="input-group">
                        <label>Valor (R$)</label>
                        <input type="number" step="0.01" id="value" required>
                    </div>
                    <div class="input-group">
                        <label>Categoria</label>
                        <select id="category" required>
                            <option value="FIXA">Fixa</option>
                            <option value="VARIAVEL">Variável</option>
                            <option value="RECORRENTE">Recorrente</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label>Data</label>
                        <input type="date" id="date" required>
                    </div>
                    <button type="submit">Registrar Transação</button>
                </form>
            </div>

            <div class="totais">
                <h3>Resumo Financeiro</h3>
                <p>Receitas: R$ <span id="totalIncome">0.00</span></p>
                <p>Despesas: R$ <span id="totalExpense">0.00</span></p>
                <p>Saldo Atual: R$ <span id="balance">0.00</span></p>
            </div>
        </div>

        <div class="table-container">
            <table id="transactionsTable">
                <thead>
                    <tr>
                        <th>Tipo</th>
                        <th>Descrição</th>
                        <th>Valor</th>
                        <th>Categoria</th>
                        <th>Data</th>
                        <th>Status</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

        <div class="export-buttons">
            <button onclick="generatePDF()"><i class="fas fa-file-pdf"></i> Exportar PDF</button>
            <button onclick="generateTXT()"><i class="fas fa-file-alt"></i> Exportar TXT</button>
        </div>
    </div>

    <script>
        let transactions = JSON.parse(localStorage.getItem('transactions')) || [];
        let nextId = transactions.length > 0 ? Math.max(...transactions.map(t => t.id)) + 1 : 1;
        let editingId = null;

        function generateRecurrentTransactions() {
            const today = new Date();
            const newTransactions = [];
            
            transactions.forEach(trans => {
                if(trans.category === 'RECORRENTE' && !trans.deleted) {
                    const transDate = new Date(trans.date);
                    const monthsDiff = Math.floor((today - transDate) / (30 * 24 * 60 * 60 * 1000));
                    
                    for(let i = 1; i <= monthsDiff; i++) {
                        const newDate = new Date(transDate);
                        newDate.setMonth(transDate.getMonth() + i);
                        
                        const exists = transactions.some(t => 
                            t.parentId === trans.id &&
                            t.date === newDate.toISOString().split('T')[0]
                        );
                        
                        if(!exists) {
                            newTransactions.push({
                                ...trans,
                                id: nextId++,
                                parentId: trans.id,
                                date: newDate.toISOString().split('T')[0],
                                paid: false,
                                deleted: false
                            });
                        }
                    }
                }
            });
            
            transactions.push(...newTransactions);
            saveData();
            updateTable();
        }

        function initializeApp() {
            generateRecurrentTransactions();
            setInterval(generateRecurrentTransactions, 86400000);
            updateTable();
            calculateTotals();
        }

        document.getElementById('transactionForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const transactionData = {
                type: document.getElementById('type').value,
                description: document.getElementById('description').value,
                value: parseFloat(document.getElementById('value').value),
                category: document.getElementById('category').value,
                date: document.getElementById('date').value
            };

            if (editingId) {
                const index = transactions.findIndex(t => t.id === editingId);
                if (index !== -1) {
                    transactions[index] = { 
                        ...transactions[index],
                        ...transactionData
                    };
                }
                editingId = null;
                document.querySelector('button[type="submit"]').textContent = 'Registrar Transação';
            } else {
                transactions.push({
                    id: nextId++,
                    ...transactionData,
                    paid: false,
                    deleted: false,
                    parentId: null
                });
            }

            saveData();
            updateTable();
            calculateTotals();
            this.reset();
        });

        function deleteTransaction(id) {
            transactions = transactions.filter(t => t.id !== id);
            transactions.forEach(t => {
                if(t.parentId === id) t.deleted = true;
            });
            saveData();
            updateTable();
            calculateTotals();
        }

        function togglePaymentStatus(id) {
            const transaction = transactions.find(t => t.id === id);
            if(transaction && transaction.type === 'DESPESA') {
                transaction.paid = !transaction.paid;
                saveData();
                calculateTotals();
                updateTable();
            }
        }

        function editTransaction(id) {
            const transaction = transactions.find(t => t.id === id);
            if (!transaction) return;

            editingId = id;
            document.getElementById('type').value = transaction.type;
            document.getElementById('description').value = transaction.description;
            document.getElementById('value').value = transaction.value;
            document.getElementById('category').value = transaction.category;
            document.getElementById('date').value = transaction.date;
            
            document.querySelector('button[type="submit"]').textContent = 'Salvar Edição';
        }

        function updateTable() {
            const tbody = document.querySelector('#transactionsTable tbody');
            tbody.innerHTML = '';
            
            transactions.filter(t => !t.deleted).forEach(trans => {
                const statusIcon = trans.type === 'DESPESA' ? `
                    <td class="status-cell">
                        <i class="fas ${trans.paid ? 'fa-check-circle paid' : 'fa-times-circle unpaid'} 
                            status-icon" onclick="togglePaymentStatus(${trans.id})"></i>
                    </td>
                ` : '<td class="status-cell">-</td>';

                tbody.innerHTML += `
                    <tr>
                        <td>${trans.type}</td>
                        <td>${trans.description} ${trans.parentId ? '<span class="recurrent-badge">Recorrente</span>' : ''}</td>
                        <td>R$ ${trans.value.toFixed(2)}</td>
                        <td>${trans.category}</td>
                        <td>${trans.date}</td>
                        ${statusIcon}
                        <td class="actions-cell">
                            <i class="fas fa-edit edit-btn" onclick="editTransaction(${trans.id})"></i>
                            <i class="fas fa-trash delete-btn" onclick="deleteTransaction(${trans.id})"></i>
                        </td>
                    </tr>
                `;
            });
        }

        function calculateTotals() {
            const totalIncome = transactions
                .filter(t => t.type === 'RECEITA' && !t.deleted)
                .reduce((sum, t) => sum + t.value, 0);
            
            const totalExpense = transactions
                .filter(t => t.type === 'DESPESA' && !t.deleted && t.paid)
                .reduce((sum, t) => sum + t.value, 0);
            
            document.getElementById('totalIncome').textContent = totalIncome.toFixed(2);
            document.getElementById('totalExpense').textContent = totalExpense.toFixed(2);
            document.getElementById('balance').textContent = (totalIncome - totalExpense).toFixed(2);
        }

        function generatePDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            doc.setFontSize(18);
            doc.setTextColor(40);
            doc.setFont("helvetica", "bold");
            doc.text("Relatório Financeiro - " + new Date().toLocaleDateString(), 15, 20);
            
            const headers = [['Tipo', 'Descrição', 'Valor (R$)', 'Categoria', 'Data', 'Status']];
            const body = transactions.filter(t => !t.deleted).map(t => [
                t.type,
                t.description + (t.parentId ? ' (Recorrente)' : ''),
                t.value.toFixed(2),
                t.category,
                t.date,
                t.type === 'DESPESA' ? (t.paid ? 'Pago' : 'Pendente') : '-'
            ]);

            doc.autoTable({
                startY: 30,
                head: headers,
                body: body,
                theme: 'grid',
                styles: { 
                    fontSize: 10,
                    cellPadding: 3,
                    valign: 'middle'
                },
                headStyles: {
                    fillColor: [74, 144, 226],
                    textColor: 255,
                    fontStyle: 'bold'
                },
                columnStyles: {
                    0: { cellWidth: 25 },
                    2: { cellWidth: 30 },
                    3: { cellWidth: 35 },
                    4: { cellWidth: 35 },
                    5: { cellWidth: 25 }
                }
            });

            const totalY = doc.lastAutoTable.finalY + 10;
            doc.setFontSize(12);
            doc.text(`Saldo Atual: R$ ${document.getElementById('balance').textContent}`, 15, totalY);

            doc.save(`relatorio-financeiro-${new Date().toISOString().split('T')[0]}.pdf`);
        }

       function generateTXT() {
    const income = transactions.filter(t => t.type === 'RECEITA' && !t.deleted);
    const expenses = transactions.filter(t => t.type === 'DESPESA' && !t.deleted);
    
    let txtContent = "=== RECEITAS ===\n";
    income.forEach(t => {
        txtContent += `${t.date} | ${t.description} | R$ ${t.value.toFixed(2)}\n`;
    });
    
    txtContent += "\n=== DESPESAS ===\n";
    expenses.forEach(t => {
        const status = t.paid ? 'PAGO' : 'PENDENTE';
        const recurrent = t.parentId ? 'RECORRENTE' : '';
        txtContent += `${t.date} | ${t.description} | R$ ${t.value.toFixed(2)} | ${status} | ${t.category} ${recurrent}\n`;
    });
    
    // Adicionar resumo final
    txtContent += "\n=== RESUMO GERAL ===\n";
    txtContent += `Receitas: R$ ${document.getElementById('totalIncome').textContent}\n`;
    txtContent += `Despesas: R$ ${document.getElementById('totalExpense').textContent}\n`;
    txtContent += `Saldo Atual: R$ ${document.getElementById('balance').textContent}`;
    
    const blob = new Blob([txtContent], { type: 'text/plain' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'extrato-financeiro.txt';
    link.click();
}

        function saveData() {
            localStorage.setItem('transactions', JSON.stringify(transactions));
        }

        window.onload = initializeApp;
    </script>
</body>
</html>
